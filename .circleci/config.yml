version: 2.1

parameters:            # ← позволяет запускать один и тот же workflow с разными значениями
  env:     {type: string, default: "dev"}
  browser: {type: string, default: "chrome"}
  marker:  {type: string, default: "smoke"}
  threads: {type: string, default: "10"}

executors:
  alpine-python:
    docker:
      - image: python:3.12.3-alpine3.19        # стабильный build
    environment:
      BROWSER: << pipeline.parameters.browser >>
      MARKER:  << pipeline.parameters.marker >>
      THREADS: << pipeline.parameters.threads >>
      STAGE:   ${STAGE}                        # секрет
    resource_class: medium

commands:
  install_runtime:
    description: "Chromium, JDK, Allure"
    steps:
      - run:
          name: Setup environment (Chromium + JDK + Allure)
          command: |
            apk add --update --no-cache \
              curl jq chromium chromium-chromedriver \
              openjdk17-jre tzdata
            # Allure → используем свежую версию
            ALLURE_VER=2.27.0
            curl -Ls "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VER}/allure-commandline-${ALLURE_VER}.tgz" \
              | tar -xz -C /opt/
            ln -sf /opt/allure-${ALLURE_VER}/bin/allure /usr/bin/allure

jobs:
  run_tests:
    executor: alpine-python
    steps:
      - checkout
      - restore_cache:
          keys: [ "pip-cache-{{ .Branch }}" ]
      - run: pip install -r requirements.txt
      - save_cache:
          paths: [ "~/.cache/pip" ]
          key: pip-cache-{{ .Branch }}
      - install_runtime       # команда из блока commands
      - run:
          name: Run tests
          command: |
            pytest -sv \
              -m "<< pipeline.parameters.marker >>" \
              --threads="<< pipeline.parameters.threads >>" \
              --alluredir=allure-results \
              --junitxml=test-results/junit.xml
      - persist_to_workspace: # передаём результаты дальше
          root: .
          paths: [ allure-results ]

  generate_report:
    executor: alpine-python
    steps:
      - checkout
      - attach_workspace: { at: . }
      # history из кеша
      - restore_cache:
          keys: [ "allure-history-{{ .Branch }}" ]
      - run:
          name: Prepare Allure history
          command: |
            mkdir -p allure-results/history
            [ -d allure-report/history ] && cp -R allure-report/history allure-results/ || true
      - run:
          name: Generate Allure report
          command: allure generate allure-results --clean -o allure-report
      - save_cache:
          paths: [ allure-report/history ]
          key: allure-history-{{ .Branch }}-{{ epoch }}
      - persist_to_workspace:
          root: .
          paths: [ allure-report ]

  deploy_gh_pages:
    docker:    # более лёгкий образ, только git + node не нужен
      - image: cimg/base:current
    steps:
      - attach_workspace: { at: . }
      - run:
          name: Deploy to gh-pages
          command: |
            git config --global user.name  "circleci"
            git config --global user.email "bot@example.com"
            git fetch origin gh-pages || true
            git checkout gh-pages || git checkout --orphan gh-pages
            rsync -a --delete allure-report/ .
            git add -A
            git commit -m "docs: update Allure report ${CIRCLE_SHA1:0:7}" || true
            git push "https://${CI_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}.git" gh-pages

workflows:
  version: 2
  ui_tests_and_report:
    jobs:
      - run_tests
      - generate_report:
          requires: [ run_tests ]
      - deploy_gh_pages:
          requires: [ generate_report ]
          filters:
            branches:
              only: main