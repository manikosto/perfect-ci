version: 2.1

jobs:
  run_tests:
    docker:
      - image: python:3.14.0a1-alpine3.20
    steps:
      - checkout

      # ─── 1. Runtime ───────────────────────────────────────────────
      - run:
          name: Setup environment
          command: |
            set -e
            apk update
            apk add --no-cache curl jq chromium chromium-chromedriver tzdata openjdk17-jre
            # glibc for Chromium
            wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
            wget -q https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.34-r0/glibc-2.34-r0.apk
            apk add --no-cache glibc-2.34-r0.apk
            # Allure CLI (свежая версия)
            ALLURE_VER=2.27.0
            curl -Ls "https://repo.maven.apache.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VER}/allure-commandline-${ALLURE_VER}.tgz" \
              | tar -xz -C /opt/
            ln -sf /opt/allure-${ALLURE_VER}/bin/allure /usr/bin/allure
            allure --version

      # ─── 2. Python deps ───────────────────────────────────────────
      - run:
          name: Install dependencies
          command: |
            pip install -r requirements.txt \
                        pytest-xdist[psutil] \
                        allure-pytest

      # ─── 3. Run tests & create junit.xml ─────────────────────────
      - run:
          name: Run tests
          command: |
            mkdir -p test-results               # ⬅ каталог для JUnit
            STAGE=https://dev-crm.qa-playground.com \
            BROWSER=chrome \
            pytest -sv -n 10 \
                   --alluredir=allure-results \
                   --junitxml=test-results/junit.xml
            echo "XML files produced:"
            find test-results -type f -name '*.xml'

      # ─── 4. Upload JUnit to Test Insights ────────────────────────
      - store_test_results:
          path: test-results                  # ⬅ как в docs

      # ─── 5. Allure history (без изменений) ───────────────────────
      - restore_cache:
          keys: [ "allure-history-{{ .Branch }}-" ]

      - run:
          name: Preparing Allure history
          command: |
            if [ -d "allure-report/history" ]; then
              mkdir -p allure-results/history
              cp -r allure-report/history allure-results/
            else
              echo "No history to restore"
            fi

      - run:
          name: Setup Allure env variables
          command: |
            echo "Branch=$CIRCLE_BRANCH" > allure-results/environment.properties
            echo "Commit=$CIRCLE_SHA1"   >> allure-results/environment.properties
            cat > allure-results/executor.json <<JSON
            {
              "name": "CircleCI",
              "type": "circleci",
              "url":  "$CIRCLE_REPOSITORY_URL",
              "buildOrder": $CIRCLE_BUILD_NUM,
              "buildName":  "$CIRCLE_BRANCH",
              "buildUrl":   "$CIRCLE_BUILD_URL"
            }
            JSON

      - run:
          name: Generate Allure report
          command: |
            allure generate allure-results --clean -o allure-report

      - save_cache:
          paths: [ allure-report/history ]
          key: allure-history-{{ .Branch }}-{{ epoch }}

      # ─── 6. Artifacts ────────────────────────────────────────────
      - store_artifacts:
          path: allure-report
          destination: allure-report

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - run_tests